@model UPC_DropDown.Models.DashboardViewModel

<marquee><h1 style="text-align: center;">Welcome To <span style="color: lightcoral;">Amazon</span><span style="color: lightcoral;"> Shoppoing</span> <span style="color:lightcoral;"> Cart</span></h1></marquee>

<style>
    .chart-container {
        display: flex;
        justify-content: space-around;
        align-items: center;
       /*  margin: 0px; */
    }

    .chart-box {
        width: 100%;
    }

        .chart-box canvas {
            width: 100% !important;
            height: 100% !important;
        }
</style>

<div class="chart-container">
    <div class="chart-box">
        <h2 style="text-align: center;">Users</h2>
        <canvas id="usersChart"></canvas>
    </div>

    <div class="chart-box">
        <h2 style="text-align: center;">Products</h2>
        <canvas id="productsChart"></canvas>
    </div>
    
    <div class="chart-box">
        <h2 style="text-align: center;">Category</h2>
        <canvas id="categoriesChart"></canvas>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            // Products Chart (Polar Area)
            var productsCtx = document.getElementById('productsChart').getContext('2d');
            var productsChart = new Chart(productsCtx, {
                type: 'polarArea',
                data: {
                    labels: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Categories.Select(c => c.CategoryName).ToList())),
                    datasets: [{
                        label: 'Number of Products',
                        data: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Categories.Select(c => Model.Products.Count(p => p.CategoryID == c.CategoryID)).ToList())),
                        backgroundColor: [
                            'rgba(255, 99, 132, 0.2)',
                            'rgba(54, 162, 235, 0.2)',
                            'rgba(255, 206, 86, 0.2)',
                            'rgba(75, 192, 192, 0.2)',
                            'rgba(153, 102, 255, 0.2)',
                            'rgba(255, 159, 64, 0.2)'
                        ],
                        borderColor: [
                            'rgba(255, 99, 132, 1)',
                            'rgba(54, 162, 235, 1)',
                            'rgba(255, 206, 86, 1)',
                            'rgba(75, 192, 192, 1)',
                            'rgba(153, 102, 255, 1)',
                            'rgba(255, 159, 64, 1)'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        r: {
                            pointLabels: {
                                display: true,
                                centerPointLabels: true,
                                font: {
                                    size: 18
                                }
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            position: 'top',
                        },
                        tooltip: {
                            callbacks: {
                                label: function (tooltipItem) {
                                    return tooltipItem.label + ': ' + tooltipItem.raw;
                                }
                            }
                        }
                    }
                }
            });

            // Users Chart (Pie)
            var usersCtx = document.getElementById('usersChart').getContext('2d');
            var usersChart = new Chart(usersCtx, {
                type: 'pie',
                data: {
                    labels: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Users.Select(u => u.UserName).ToList())),
                    datasets: [{
                        label: 'Number of Users',
                        data: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Users.Select(u => u.Salary).ToList())),
                        backgroundColor: [
                            'rgba(255, 99, 132, 0.2)',
                            'rgba(54, 162, 235, 0.2)',
                            'rgba(255, 206, 86, 0.2)',
                            'rgba(75, 192, 192, 0.2)',
                            'rgba(153, 102, 255, 0.2)',
                            'rgba(255, 159, 64, 0.2)'
                        ],
                        borderColor: [
                            'rgba(255, 99, 132, 1)',
                            'rgba(54, 162, 235, 1)',
                            'rgba(255, 206, 86, 1)',
                            'rgba(75, 192, 192, 1)',
                            'rgba(153, 102, 255, 1)',
                            'rgba(255, 159, 64, 1)'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        tooltip: {
                            callbacks: {
                                label: function (tooltipItem) {
                                    return tooltipItem.label + ': ' + tooltipItem.raw;
                                }
                            }
                        }
                    }
                }
            });

            // Categories Chart (Doughnut)
            var categoriesCtx = document.getElementById('categoriesChart').getContext('2d');
            var categoriesChart = new Chart(categoriesCtx, {
                type: 'doughnut',
                data: {
                    labels: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Categories.Select(c => c.CategoryName).ToList())),
                    datasets: [{
                        label: 'Categories',
                        data: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Categories.Select(c => Model.Products.Count(p => p.CategoryID == c.CategoryID)).ToList())),
                        backgroundColor: [
                            'rgba(255, 99, 132, 0.2)',
                            'rgba(54, 162, 235, 0.2)',
                            'rgba(255, 206, 86, 0.2)',
                            'rgba(75, 192, 192, 0.2)',
                            'rgba(153, 102, 255, 0.2)',
                            'rgba(255, 159, 64, 0.2)'
                        ],
                        borderColor: [
                            'rgba(255, 99, 132, 1)',
                            'rgba(54, 162, 235, 1)',
                            'rgba(255, 206, 86, 1)',
                            'rgba(75, 192, 192, 1)',
                            'rgba(153, 102, 255, 1)',
                            'rgba(255, 159, 64, 1)'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'top',
                        },
                        tooltip: {
                            callbacks: {
                                label: function (tooltipItem) {
                                    return tooltipItem.label + ': ' + tooltipItem.raw;
                                }
                            }
                        }
                    }
                }
            });
        });
    </script>

    <div class="row" style="padding:4% ">
        <div class="col-md-12">
            <h3>Products</h3>
            <div id="productList">
                @await Html.PartialAsync("_ProductListPartial", Model.Products)
            </div>
        </div>
    </div>
    <div class="row" style="padding:4%">
        <div class="col-md-6">
            <h3>Users</h3>
            <div id="userList">
                @await Html.PartialAsync("_UserListPartial", Model.Users)
            </div>
        </div>

        <div class="col-md-6">
            <h3>Categories</h3>
            <div id="categoryList">
                @await Html.PartialAsync("_CategoryListPartial", Model.Categories)
            </div>
        </div>
    </div>
}
